var _user$project$Main$onEnter = function (msg) {
	var isEnter = function (code) {
		return _elm_lang$core$Native_Utils.eq(code, 13) ? _elm_lang$core$Json_Decode$succeed(msg) : _elm_lang$core$Json_Decode$fail('not ENTER');
	};
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$andThen, isEnter, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$viewLog = function (log) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(log.content),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewLogs = function (logs) {
	return A2(
		_elm_lang$html$Html$section,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('main'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, _user$project$Main$viewLog, logs)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$newLog = F2(
	function (content, id) {
		return {id: id, content: content, complete: false};
	});
var _user$project$Main$model = {
	logs: {
		ctor: '::',
		_0: A2(_user$project$Main$newLog, '', 1),
		_1: {ctor: '[]'}
	},
	field: '',
	uid: 0
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Add':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						uid: model.uid + 1,
						field: '',
						logs: _elm_lang$core$String$isEmpty(model.field) ? model.logs : A2(
							_elm_lang$core$Basics_ops['++'],
							model.logs,
							{
								ctor: '::',
								_0: A2(_user$project$Main$newLog, model.field, model.uid),
								_1: {ctor: '[]'}
							})
					});
			case 'UpdateLog':
				var updateLog = function (l) {
					return _elm_lang$core$Native_Utils.eq(l.id, _p0._0) ? _elm_lang$core$Native_Utils.update(
						l,
						{content: _p0._1}) : l;
				};
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						logs: A2(_elm_lang$core$List$map, updateLog, model.logs)
					});
			case 'UpdateField':
				return _elm_lang$core$Native_Utils.update(
					model,
					{field: _p0._0});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						logs: A2(
							_elm_lang$core$List$filter,
							function (log) {
								return !_elm_lang$core$Native_Utils.eq(log.id, _p0._0);
							},
							model.logs)
					});
		}
	});
var _user$project$Main$Log = F3(
	function (a, b, c) {
		return {id: a, content: b, complete: c};
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {logs: a, field: b, uid: c};
	});
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$UpdateField = function (a) {
	return {ctor: 'UpdateField', _0: a};
};
var _user$project$Main$viewInput = function (log) {
	return A2(
		_elm_lang$html$Html$header,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('header'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('logs'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('new-log'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('What\'s on your mind? '),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$autofocus(true),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(log),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$name('newLog'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateField),
											_1: {
												ctor: '::',
												_0: _user$project$Main$onEnter(_user$project$Main$Add),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('todomvc-wrapper'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$section,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('todoapp'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Main$viewInput(model.field),
					_1: {
						ctor: '::',
						_0: _user$project$Main$viewLogs(model.logs),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$model, view: _user$project$Main$view, update: _user$project$Main$update})();
var _user$project$Main$DeleteLog = function (a) {
	return {ctor: 'DeleteLog', _0: a};
};
var _user$project$Main$UpdateLog = F2(
	function (a, b) {
		return {ctor: 'UpdateLog', _0: a, _1: b};
	});
